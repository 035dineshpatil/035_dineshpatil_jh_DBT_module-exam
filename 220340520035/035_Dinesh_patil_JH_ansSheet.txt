/* 1. Create table DEPT with the following structure:-
DEPTNO int(2)
DNAME varchar(15)
LOC varchar(10)
Insert the following rows into the DEPT table:-
10 ACCOUNTING NEW YORK
20 RESEARCH DALLAS
30 SALES CHICAGO
40 OPERATIONS BOSTON */


create table DEPT
(DEPTNO int(2),
DNAME varchar(15),
LOC varchar(10));
insert into DEPT 
VALUES (10, 'ACCOUNTING', 'NWE YORK'),
(20, 'RESEARCH', 'DELLAS'),
(30, 'SALES', 'CHICAGO'),
(40, 'OPERATIONS', 'BOSTON');
SELECT * FROM DEPT;
=========================================================
/*2. Create table EMP with the following structure:-
EMPNO int(4)
ENAME varchar(10)
JOB varchar(9)
HIREDATE date
SAL float(7,2)
COMM float(7,2)
DEPTNO int(2)
Insert the following rows into the EMP table:-
7839 KING MANAGER 1991-11-17 5000 NULL 10
7698 BLAKE CLERK 1981-05-01 2850 NULL 30
7782 CLARK MANAGER 1981-06-09 2450 NULL 10
7566 JONES CLERK 1981-04-02 2975 NULL 20
7654 MARTIN SALESMAN 1981-09-28 1250 1400 30
7499 ALLEN SALESMAN 1981-02-20 1600 300 30*/


CREATE TABLE EMP
(EMPNO int(4),
ENAME varchar(10),
JOB varchar(9),
HIREDATE date,
SAL float(7,2),
COMM float(7,2),
DEPTNO int(2));
insert into EMP 
values (7839, 'KING', 'MANAGER', '1991-11-17', 5000, NULL, 10),
(7698, 'BLAKE', 'CLERK', '1981-05-01', 2850, NULL, 30),
(7782, 'CLARK', 'MANAGER', '1981-06-019', 2450, NULL, 10),
(7566, 'JONES', 'CLERK', '1981-04-02', 2975, NULL, 20),
(7654, 'MARTINE', 'SALESMAN', '1981-09-28', 1250, 1400, 30),
(7499, 'ALLEN', 'SALESMAN', '1981-02-20', 1600, 300, 30);
======================================================================================
/*3. Display all the employees where SAL between 2500 and 5000 (inclusive of both)*/

select ename from emp 
where SAL between 2500 and 5000;
=====================================================================
/*4. Display all the ENAMEs in descending order of ENAME.*/

select ENAME from EMP 
order by ENAME desc;
=========================================================
/*5. Display all the JOBs in lowercase.*/

select lower(job) from emp;
=========================================================
/*6. Display the ENAMEs and the lengths of the ENAMEs.*/

select ENAME, LENGTH(ENAME) FROM EMP;
================================================================================
/*7. Display the DEPTNO and the count of employees who belong to that DEPTNO .*/

SELECT DEPTNO, COUNT(*) FROM EMP 
GROUP BY DEPTNO;
===================================================================
/*8. Display the DNAMEs and the ENAMEs who belong to that DNAME.*/

SELECT e.ename, d.dname from emp e
join DEPT d on e.DEPTNO=d.DEPTNO;
=========================================================================
/*9. Display the position at which the string ‘AR’ occurs in the ename.*/

SELECT locate ('AR',ename) from emp;
========================================================================
/*10. Display the HRA for each employee given that HRA is 20% of SAL.*/

select ename, 0.2*sal as HRA from emp;
=========================================================================


SEC 2

=======================================================================================
/*1. Write a stored procedure by the name of PROC1 that accepts two varchar strings
as parameters. Your procedure should then determine if the first varchar string 
exists inside the varchar string. For example, if string1 = ‘DAC’ and string2 = 
‘CDAC, then string1 exists inside string2. The stored procedure should insert the 
appropriate message into a suitable TEMPP output table. Calling program for the 
stored procedure need not be written.*/

create table tempp
( string1 varchar(60),
string2 varchar(60),
message varchar (70));

delimiter //
create procedure PROC1(string1 varchar(60), string2 varchar(60))
begin 
declare message varchar(70);
declare x int;
select locate(string1, string2) into x;
if x>0 then
	insert into tempp
    values (string1, string2, 'string1 exists inside string2');
    else
		insert into tempp 
        values (string1, string2, 'string1 dose not exists inside string2');
end if;
end; //
delimiter ;
call PROC1('DAC','CDAC');
select * from tempp;
==================================================================================================
/*2. Create a stored function by the name of FUNC1 to take three parameters, the 
sides of a triangle. The function should return a Boolean value:- TRUE if the 
triangle is valid, FALSE otherwise. A triangle is valid if the length of each side is 
less than the sum of the lengths of the other two sides. Check if the dimensions 
entered can form a valid triangle. Calling program for the stored function need not 
be written. */


delimiter //
create function FUNC1(x int, y int, z int)
returns varchar (40)
deterministic
begin
	if x+y>z and
    y+z>x and
    z+x>y then
		return 'TRUE';
	ELSE 
		RETURN 'FALSE';
	END IF;
end; //
delimiter ;
===================================================================================================